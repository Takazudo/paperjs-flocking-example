// Generated by CoffeeScript 1.4.0
(function() {
  var Boid, BoidCollection, Module, World, abs, p, randomNum, tool,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  p = window.paper;

  tool = new p.Tool;

  abs = Math.abs;

  Module = (function() {

    function Module() {}

    return Module;

  })();

  _.extend(Module.prototype, Backbone.Events);

  randomNum = function(from, to) {
    return from + (Math.floor(Math.random() * (to - from + 1)));
  };

  World = (function(_super) {

    __extends(World, _super);

    function World() {
      this._eventify();
    }

    World.prototype._eventify = function() {
      var _this = this;
      p.view.onFrame = function(e) {
        return _this.trigger('frame', e);
      };
      p.view.onResize = function(e) {
        return _this.trigger('resize', e);
      };
      tool.onMouseMove = function(e) {
        return _this.trigger('mousemove', e);
      };
      return this;
    };

    return World;

  })(Module);

  Boid = (function(_super) {

    __extends(Boid, _super);

    Boid.radius = 5;

    Boid.minSpeed = 2;

    Boid.maxSpeed = 10;

    Boid.slowDownRate = 0.98;

    function Boid(x, y) {
      this.velocity = new p.Point(randomNum(-10, 10), randomNum(-10, 10));
      this.normalizeVelocity();
      this.circle = new p.Path.Circle({
        x: x,
        y: y
      }, Boid.radius);
      this.circle.style = {
        fillColor: '#fff'
      };
    }

    Boid.prototype.normalizeVelocity = function() {
      this.velocity = this.velocity.normalize(5);
      return this;
    };

    Boid.prototype._handleEdgeBounce = function() {
      var pos, vb;
      pos = this.circle.position;
      vb = p.view.bounds;
      if (pos.isInside(vb)) {
        return this;
      }
      if (pos.x > vb.width + Boid.radius) {
        this.velocity.x = -this.velocity.x;
        if (this.velocity.x > -12) {
          this.velocity.x = -12;
          this.normalizeVelocity();
        }
      }
      if (pos.y > vb.height + Boid.radius) {
        this.velocity.y = -this.velocity.y;
        if (this.velocity.y > -12) {
          this.velocity.y = -12;
          this.normalizeVelocity();
        }
      }
      if (pos.x < 0 - Boid.radius) {
        this.velocity.x = -this.velocity.x;
        if (this.velocity.x < 12) {
          this.velocity.x = 12;
          this.normalizeVelocity();
        }
      }
      if (pos.y < 0 - Boid.radius) {
        this.velocity.y = -this.velocity.y;
        if (this.velocity.y < 12) {
          this.velocity.y = 12;
          this.normalizeVelocity();
        }
      }
      return this;
    };

    Boid.prototype._drawArrow = function() {
      var center;
      if (this.arrow != null) {
        this.arrow.remove();
      }
      center = this.circle.position;
      this.arrow = new p.Path.Line(center, center.add(this.velocity.multiply(5)));
      this.arrow.style = {
        strokeColor: '#fff',
        strokeWidth: 1
      };
      return this;
    };

    Boid.prototype.move = function() {
      this._handleEdgeBounce();
      this._drawArrow();
      this.circle.position = this.circle.position.add(this.velocity);
      return this;
    };

    Boid.prototype.align = function(boids) {
      var boid, _i, _len;
      if (boids === null) {
        return this;
      }
      this.velocity = this.velocity.multiply(50);
      for (_i = 0, _len = boids.length; _i < _len; _i++) {
        boid = boids[_i];
        this.velocity = this.velocity.add(boid.velocity);
      }
      this.velocity = this.velocity.divide(50 + boids.length);
      this.normalizeVelocity();
      return this;
    };

    return Boid;

  })(Module);

  BoidCollection = (function(_super) {

    __extends(BoidCollection, _super);

    function BoidCollection() {
      this._createBoids();
    }

    BoidCollection.prototype._createBoids = function() {
      var i, item, x, y, _i;
      this._items = [];
      for (i = _i = 1; _i < 40; i = ++_i) {
        x = randomNum(0, p.view.bounds.width);
        y = randomNum(0, p.view.bounds.height);
        item = new Boid(x, y);
        this._items.push(item);
      }
      return this;
    };

    BoidCollection.prototype._handleCollision = function() {
      var distance, distanceX, distanceY, i, itemA, itemAX, itemAY, itemB, itemBX, itemBY, j, radius;
      i = this._items.length - 1;
      radius = 2 * Boid.radius;
      radius = radius * radius;
      while (i >= 0) {
        itemA = this._items[i];
        itemAX = itemA.circle.position.x;
        itemAY = itemA.circle.position.y;
        j = 0;
        while (j < i) {
          itemB = this._items[j];
          itemBX = itemB.circle.position.x;
          itemBY = itemB.circle.position.y;
          distanceX = itemBX - itemAX;
          distanceY = itemBY - itemAY;
          distance = distanceX * distanceX + distanceY * distanceY;
          if (distance < radius) {
            itemB.velocity.x = distanceY;
            itemB.velocity.y = distanceX;
            itemA.velocity.x = -distanceX;
            itemA.velocity.y = -distanceY;
            itemA.normalizeVelocity();
            itemB.normalizeVelocity();
          }
          j += 1;
        }
        i -= 1;
      }
      return this;
    };

    BoidCollection.prototype._getItemsNear = function(item, radius) {
      var posA, res;
      posA = item.circle.position;
      radius = radius * radius;
      res = _.filter(this._items, function(current) {
        var distance, distanceX, distanceY, posB;
        if (current === item) {
          return false;
        }
        posB = current.circle.position;
        distanceX = posB.x - posA.x;
        distanceY = posB.y - posA.y;
        distance = distanceX * distanceX + distanceY * distanceY;
        if (distance < radius) {
          return true;
        }
        return false;
      });
      if (res.length === 0) {
        return null;
      }
      return res;
    };

    BoidCollection.prototype.update = function() {
      var item, nearItems, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this._items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        nearItems = this._getItemsNear(item, 100);
        item.align(nearItems);
      }
      this._handleCollision();
      _ref1 = this._items;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        item.move();
      }
      return this;
    };

    return BoidCollection;

  })(Module);

  $(function() {
    var boids, canvas, world;
    canvas = $('#canvas')[0];
    p.setup(canvas);
    world = new World;
    boids = new BoidCollection;
    return world.on('frame', function() {
      return boids.update();
    });
  });

}).call(this);
