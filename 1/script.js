// Generated by CoffeeScript 1.4.0
(function() {
  var Boid, BoidCollection, Module, World, p, randomNum, tool,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  p = window.paper;

  tool = new p.Tool;

  Module = (function() {

    function Module() {}

    return Module;

  })();

  _.extend(Module.prototype, Backbone.Events);

  randomNum = function(from, to) {
    return from + (Math.floor(Math.random() * (to - from + 1)));
  };

  World = (function(_super) {

    __extends(World, _super);

    function World() {
      this._eventify();
    }

    World.prototype._eventify = function() {
      var _this = this;
      p.view.onFrame = function(e) {
        return _this.trigger('frame', e);
      };
      p.view.onResize = function(e) {
        return _this.trigger('resize', e);
      };
      tool.onMouseMove = function(e) {
        return _this.trigger('mousemove', e);
      };
      return this;
    };

    return World;

  })(Module);

  Boid = (function(_super) {

    __extends(Boid, _super);

    Boid.radius = 5;

    Boid.style = {
      fillColor: 'white'
    };

    function Boid(x, y) {
      this.x = x;
      this.y = y;
      this.velocity = new p.Point(3, 3);
      this.circle = new p.Path.Circle(new p.Point(this.x, this.y), Boid.radius);
      this.circle.style = Boid.style;
    }

    Boid.prototype._handleEdgeBounce = function() {
      var pos, vb;
      pos = this.circle.position;
      vb = p.view.bounds;
      if (pos.isInside(vb)) {
        return this;
      }
      if (pos.x > vb.width + Boid.radius) {
        pos.x = -Boid.radius;
      }
      if (pos.y > vb.height + Boid.radius) {
        pos.y = -Boid.radius;
      }
      return this;
    };

    Boid.prototype.move = function() {
      this._handleEdgeBounce();
      this.circle.position = this.circle.position.add(this.velocity);
      return this;
    };

    return Boid;

  })(Module);

  BoidCollection = (function(_super) {

    __extends(BoidCollection, _super);

    function BoidCollection() {
      this._createBoids();
    }

    BoidCollection.prototype._createBoids = function() {
      var i, item, x, y, _i;
      this._items = [];
      for (i = _i = 1; _i < 20; i = ++_i) {
        x = randomNum(0, p.view.bounds.width);
        y = randomNum(0, p.view.bounds.height);
        item = new Boid(x, y);
        this._items.push(item);
      }
      return this;
    };

    BoidCollection.prototype.update = function() {
      var item, _i, _len, _ref;
      _ref = this._items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.move();
      }
      return this;
    };

    return BoidCollection;

  })(Module);

  $(function() {
    var boids, canvas, world;
    canvas = $('#canvas')[0];
    p.setup(canvas);
    world = new World;
    boids = new BoidCollection;
    return world.on('frame', function() {
      return boids.update();
    });
  });

}).call(this);
